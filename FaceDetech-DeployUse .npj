{
    "scene_array": [
        {
            "data": "{\n    \"connections\": [\n        {\n            \"in_id\": \"{4e6f361d-ca7c-4bd9-95a2-89070fc1ffc7}\",\n            \"in_index\": 0,\n            \"out_id\": \"{4b805b48-2ec6-4576-99d1-cbe4365c01b2}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{2c870f00-0d67-4aef-a5bd-8ab2bca1986d}\",\n            \"in_index\": 0,\n            \"out_id\": \"{4e6f361d-ca7c-4bd9-95a2-89070fc1ffc7}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{dfd88bca-0844-484b-b6b0-138e3d4e5887}\",\n            \"in_index\": 0,\n            \"out_id\": \"{4b805b48-2ec6-4576-99d1-cbe4365c01b2}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{0651c316-5fa7-46b9-bd61-22612af6320d}\",\n            \"in_index\": 0,\n            \"out_id\": \"{4b805b48-2ec6-4576-99d1-cbe4365c01b2}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{4b805b48-2ec6-4576-99d1-cbe4365c01b2}\",\n            \"in_index\": 0,\n            \"out_id\": \"{dfd88bca-0844-484b-b6b0-138e3d4e5887}\",\n            \"out_index\": 0\n        },\n        {\n            \"in_id\": \"{24a485d6-df8f-4c3c-acb9-61e20b55e53d}\",\n            \"in_index\": 0,\n            \"out_id\": \"{4e6f361d-ca7c-4bd9-95a2-89070fc1ffc7}\",\n            \"out_index\": 0\n        }\n    ],\n    \"nodes\": [\n        {\n            \"id\": \"{dfd88bca-0844-484b-b6b0-138e3d4e5887}\",\n            \"model\": {\n                \"name\": \"ButtonRun\"\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -722.7000000000003,\n                \"y\": -363\n            }\n        },\n        {\n            \"id\": \"{97344884-4947-4a71-bfb2-00c7b5a65c2b}\",\n            \"model\": {\n                \"delay_time\": 0,\n                \"name\": \"Delay\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -104.5,\n                \"y\": -51.70000000000002\n            }\n        },\n        {\n            \"id\": \"{2c870f00-0d67-4aef-a5bd-8ab2bca1986d}\",\n            \"model\": {\n                \"height\": 541,\n                \"name\": \"Debug\",\n                \"output_h\": 0,\n                \"output_v\": 0,\n                \"page_index\": 2,\n                \"payload_h\": 0,\n                \"payload_v\": 0,\n                \"width\": 631\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": 146.09239999999988,\n                \"y\": -563.4434000000001\n            }\n        },\n        {\n            \"id\": \"{4b805b48-2ec6-4576-99d1-cbe4365c01b2}\",\n            \"model\": {\n                \"data\": {\n                    \"camera_device\": \"0 : HD WebCam\"\n                },\n                \"name\": \"WebCam\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -568.7,\n                \"y\": -365.6000000000001\n            }\n        },\n        {\n            \"id\": \"{fd870923-8948-496e-b2fe-4083e0208848}\",\n            \"model\": {\n                \"data\": {\n                    \"form\": true,\n                    \"have_image\": true,\n                    \"have_sticker\": false,\n                    \"js_script\": \"line_msg = \\\"hello\\\";\\nline_image = true;\\n\",\n                    \"message\": \"TestSend_PTL\",\n                    \"script\": false,\n                    \"sticker_index\": 1,\n                    \"sticker_package\": 1,\n                    \"token\": \"\"\n                },\n                \"name\": \"LineNotify\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -268.4000000000001,\n                \"y\": -51.7\n            }\n        },\n        {\n            \"id\": \"{0651c316-5fa7-46b9-bd61-22612af6320d}\",\n            \"model\": {\n                \"data\": {\n                },\n                \"name\": \"FaceTrainer\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -461.4999999999999,\n                \"y\": -206.20000000000005\n            }\n        },\n        {\n            \"id\": \"{4e6f361d-ca7c-4bd9-95a2-89070fc1ffc7}\",\n            \"model\": {\n                \"data\": {\n                    \"face_only\": false,\n                    \"font_scale\": 1.05,\n                    \"font_thickness\": 2,\n                    \"max_distance\": 25,\n                    \"rect_thickness\": 2,\n                    \"result_drawing\": true,\n                    \"show_distance\": true,\n                    \"text_drawing\": true,\n                    \"thresh\": 80,\n                    \"txt_offset\": 10\n                },\n                \"name\": \"FaceRec\",\n                \"node_enable\": true\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -290.40000000000003,\n                \"y\": -354.19999999999993\n            }\n        },\n        {\n            \"id\": \"{24a485d6-df8f-4c3c-acb9-61e20b55e53d}\",\n            \"model\": {\n                \"data\": {\n                    \"comment\": \"\",\n                    \"py_ver\": \"2. Python310\",\n                    \"script\": \"#**pip-install library in CiraCore**#\\n#pip install numpy\\n#pip install opencv-python\\n#pip install opencv-contrib-python\\n\\n#**MySQL Driver**#\\n#python -m pip install mysql-connector-python\\n\\nimport mysql.connector #เรียกใช้ my sql\\nimport requests #ใช้รีเควชส่งline\\nimport datetime#ใช้ get เวลาปัจจุบัน\\n\\ndef sendline(msg):#ส่งค่า msg เข้ามา\\n    url = 'https://notify-api.line.me/api/notify'#url ที่ใช้ส่ง line\\n    token = 'lJJq0F5Abeb6e9ZGuG9w355nvqLsUjLumYlhzCnAKrK'#token line\\n    headers = {'content-type':'application/x-www-form-urlencoded','Authorization':'Bearer '+token}# กำหนด header\\n\\n    r = requests.post(url, headers=headers, data = {'message':msg})#รับค่าคืน เอาค่าที่ส่งไปรับคืน\\n    return r.ok#รีเทินค่า r ถ้าส่งได้เป็น true ส่งไม่ได้ false\\n\\nmydb = mysql.connector.connect (#กำหนดค่าเชื่อมต่อ database\\n     host = \\\"localhost\\\",#host ในเครื่อง\\n     user = \\\"root\\\",#ีuser\\n     password = \\\"\\\",#password\\n     database = \\\"face_db\\\"#=ชื่อ database\\n)\\n\\nmycursor = mydb.cursor()#Testว่าdatabaseใช้งานได้ไหมผ่าน curcor\\n#ดึงข้อมูลภาพจาก payload\\ndd = datetime.datetime.now()#สร้างตัวแปรเก็บค่าวันที่\\n\\nobjects = payload[\\\"FaceRec\\\"][\\\"face_array\\\"]#สร้างตัวแปรรับค่าจาก payload แล้วไปอ่านค่าfaceRecจากนั้นไปอ่านค่าจากFaceArray\\nface_count = payload[\\\"FaceRec\\\"][\\\"count\\\"]#สร้างตัวแปรอ่านจำนวนใบหน้าที่พบเจอ\\n\\nif (face_count <=0) :#ถ้าไม่เจอใบหน้า\\n    print(\\\"ไม่พบข้อมูลใบหน้า\\\")#ให้ปริ้นข้อความมา\\n    payload[\\\"show_message\\\"] = \\\"ไม่พบข้อมูลใบหน้า\\\"#โชว์ข้อความใน payload\\nelse :#ถ้าเจอใบหน้าให้เอาตัวแปรมารับ\\n    for objs in objects :#สร้างตัวแปรมารับค่า objects\\n        sql = \\\"select * from tbl_students where std_code = %s\\\"#เรียกดูข้อมูลจากตารางtbl_students ใส่ค่าว่างไว้ก่อน%s\\n        val = (objs[\\\"name\\\"], )#ตัวแปรรับค่าแสดงlabel name\\n        mycursor.execute(sql,val)#สั่ง execute พร้อมส่งค่าพารามิเตอร์\\n        records = mycursor.fetchall()#ดึงข้อมูลออกมาทั้งหมด\\n        if (mycursor.rowcount <= 0) :#ตรวจสอบข้อมูลที่ดึงมามีกี่แถวน้อยกว่าหรือเท่ากับ 0 \\n            print(\\\"ไม่พบข้อมูล \\\",objs[\\\"name\\\"],\\\"ในฐานข้อมูล\\\")#ให้ปริ้นข้อความไม่พบข้อมูลออกมา\\n        else :#ถ้ามีข้อมูลในฐานข้อมูลจะให้เก็บข้อมูลไว้\\n            std_name = records[0][1]+records[0][2]+\\\" \\\"+records[0][3] #โดยจะดึงจากตารางในฐานข้อมุล ดึงข้อมูลที่เชื่อมต่อระหว่างข้อมูลที่ลงทะเบียนกับข้อมูลนักเรียน\\n            sql = \\\"select datetime, send_line from tbl_checkin where std_code = %s and DATE(datetime) = %s \\\"#สร้างตัวแปร sql เพื่อดึงข้อมูลมาจากตารางดึงเวลา ดึงการส่งข้อมูลการส่งไลน์\\n            val = (objs[\\\"name\\\"], dd.strftime(\\\"%Y-%m-%d\\\"), )#สร้างตัวแปร ส่งค่า name และค่า datetime โดยแสดง ปี เดือน วัน\\n            mycursor.execute(sql,val)#execute ตัวแปร sql val\\n            records = mycursor.fetchall()#ดึงข้อมูลทั้งหมดมาแสดง\\n            if (mycursor.rowcount <=0):#\\n                sql = \\\"insert into tbl_checkin (check_id, datetime, std_code, send_line) values(NULL, %s, %s, '0')\\\"#เพิ่มข้อมูลลงในฐานข้อมูลเมื่อสแกนใบหน้าสำเร็จในตารางเช็คอิน\\n                val = (dd.strftime(\\\"%Y-%m-%d %H:%M\\\"), objs[\\\"name\\\"], )#แสดงเวลามาเรียน\\n                mycursor.execute(sql,val)#\\n                mydb.commit()#\\n            \\n                msg = \\\"บันทึกข้อมูลลงเวลา ของ \\\"+std_name+\\\" เมื่อ \\\"+dd.strftime(\\\"%Y-%m-%d %H:%M\\\")#บันทึกข้อมูลลงเวลา stdname ชื่อนักเรียน เมื่อเาลาเท่าไหร่ ระบบจะใช้ฟังชันข้างบน\\n                sl = sendline(msg)#test ว่าส่งlineได้ไหม\\n            \\n                if(sl) :#เทสว่าข้อมูลslที่ส่งมาว่าเปนจริงหรือเปนเเท็จ ถ้าเป็นจริงส่ง line สำเร็จโดย\\n                    sql = \\\"update tbl_checkin set send_line = '1' where std_code = %s\\\"#ให้เปลี่ยนจากค่า 0เป็นค่า1 เพื่อยืนยันว่าส่งไลน์ได้แล้วโดยกำหนดส่งแค่ 1ครั้งต่อ1วัน\\n                    val = (objs[\\\"name\\\"], )#อัพเดดเมื่อstdcode ตรงกับข้อมูลใน db\\n                    mycursor.execute(sql,val)#\\n                    mydb.commit()#\",\n                    \"tmp_path\": \"C:/Users/User/Desktop/CiraCore.py\"\n                },\n                \"height\": 47,\n                \"name\": \"PythonScript\",\n                \"node_enable\": true,\n                \"python_code\": \"#**pip-install library in CiraCore**#\\n#pip install numpy\\n#pip install opencv-python\\n#pip install opencv-contrib-python\\n\\n#**MySQL Driver**#\\n#python -m pip install mysql-connector-python\\n\\nimport mysql.connector #เรียกใช้ my sql\\nimport requests #ใช้รีเควชส่งline\\nimport datetime#ใช้ get เวลาปัจจุบัน\\n\\ndef sendline(msg):#ส่งค่า msg เข้ามา\\n    url = 'https://notify-api.line.me/api/notify'#url ที่ใช้ส่ง line\\n    token = 'lJJq0F5Abeb6e9ZGuG9w355nvqLsUjLumYlhzCnAKrK'#token line\\n    headers = {'content-type':'application/x-www-form-urlencoded','Authorization':'Bearer '+token}# กำหนด header\\n\\n    r = requests.post(url, headers=headers, data = {'message':msg})#รับค่าคืน เอาค่าที่ส่งไปรับคืน\\n    return r.ok#รีเทินค่า r ถ้าส่งได้เป็น true ส่งไม่ได้ false\\n\\nmydb = mysql.connector.connect (#กำหนดค่าเชื่อมต่อ database\\n     host = \\\"localhost\\\",#host ในเครื่อง\\n     user = \\\"root\\\",#ีuser\\n     password = \\\"\\\",#password\\n     database = \\\"face_db\\\"#=ชื่อ database\\n)\\n\\nmycursor = mydb.cursor()#Testว่าdatabaseใช้งานได้ไหมผ่าน curcor\\n#ดึงข้อมูลภาพจาก payload\\ndd = datetime.datetime.now()#สร้างตัวแปรเก็บค่าวันที่\\n\\nobjects = payload[\\\"FaceRec\\\"][\\\"face_array\\\"]#สร้างตัวแปรรับค่าจาก payload แล้วไปอ่านค่าfaceRecจากนั้นไปอ่านค่าจากFaceArray\\nface_count = payload[\\\"FaceRec\\\"][\\\"count\\\"]#สร้างตัวแปรอ่านจำนวนใบหน้าที่พบเจอ\\n\\nif (face_count <=0) :#ถ้าไม่เจอใบหน้า\\n    print(\\\"ไม่พบข้อมูลใบหน้า\\\")#ให้ปริ้นข้อความมา\\n    payload[\\\"show_message\\\"] = \\\"ไม่พบข้อมูลใบหน้า\\\"#โชว์ข้อความใน payload\\nelse :#ถ้าเจอใบหน้าให้เอาตัวแปรมารับ\\n    for objs in objects :#สร้างตัวแปรมารับค่า objects\\n        sql = \\\"select * from tbl_students where std_code = %s\\\"#เรียกดูข้อมูลจากตารางtbl_students ใส่ค่าว่างไว้ก่อน%s\\n        val = (objs[\\\"name\\\"], )#ตัวแปรรับค่าแสดงlabel name\\n        mycursor.execute(sql,val)#สั่ง execute พร้อมส่งค่าพารามิเตอร์\\n        records = mycursor.fetchall()#ดึงข้อมูลออกมาทั้งหมด\\n        if (mycursor.rowcount <= 0) :#ตรวจสอบข้อมูลที่ดึงมามีกี่แถวน้อยกว่าหรือเท่ากับ 0 \\n            print(\\\"ไม่พบข้อมูล \\\",objs[\\\"name\\\"],\\\"ในฐานข้อมูล\\\")#ให้ปริ้นข้อความไม่พบข้อมูลออกมา\\n        else :#ถ้ามีข้อมูลในฐานข้อมูลจะให้เก็บข้อมูลไว้\\n            std_name = records[0][1]+records[0][2]+\\\" \\\"+records[0][3] #โดยจะดึงจากตารางในฐานข้อมุล ดึงข้อมูลที่เชื่อมต่อระหว่างข้อมูลที่ลงทะเบียนกับข้อมูลนักเรียน\\n            sql = \\\"select datetime, send_line from tbl_checkin where std_code = %s and DATE(datetime) = %s \\\"#สร้างตัวแปร sql เพื่อดึงข้อมูลมาจากตารางดึงเวลา ดึงการส่งข้อมูลการส่งไลน์\\n            val = (objs[\\\"name\\\"], dd.strftime(\\\"%Y-%m-%d\\\"), )#สร้างตัวแปร ส่งค่า name และค่า datetime โดยแสดง ปี เดือน วัน\\n            mycursor.execute(sql,val)#execute ตัวแปร sql val\\n            records = mycursor.fetchall()#ดึงข้อมูลทั้งหมดมาแสดง\\n            if (mycursor.rowcount <=0):#\\n                sql = \\\"insert into tbl_checkin (check_id, datetime, std_code, send_line) values(NULL, %s, %s, '0')\\\"#เพิ่มข้อมูลลงในฐานข้อมูลเมื่อสแกนใบหน้าสำเร็จในตารางเช็คอิน\\n                val = (dd.strftime(\\\"%Y-%m-%d %H:%M\\\"), objs[\\\"name\\\"], )#แสดงเวลามาเรียน\\n                mycursor.execute(sql,val)#\\n                mydb.commit()#\\n            \\n                msg = \\\"บันทึกข้อมูลลงเวลา ของ \\\"+std_name+\\\" เมื่อ \\\"+dd.strftime(\\\"%Y-%m-%d %H:%M\\\")#บันทึกข้อมูลลงเวลา stdname ชื่อนักเรียน เมื่อเาลาเท่าไหร่ ระบบจะใช้ฟังชันข้างบน\\n                sl = sendline(msg)#test ว่าส่งlineได้ไหม\\n            \\n                if(sl) :#เทสว่าข้อมูลslที่ส่งมาว่าเปนจริงหรือเปนเเท็จ ถ้าเป็นจริงส่ง line สำเร็จโดย\\n                    sql = \\\"update tbl_checkin set send_line = '1' where std_code = %s\\\"#ให้เปลี่ยนจากค่า 0เป็นค่า1 เพื่อยืนยันว่าส่งไลน์ได้แล้วโดยกำหนดส่งแค่ 1ครั้งต่อ1วัน\\n                    val = (objs[\\\"name\\\"], )#อัพเดดเมื่อstdcode ตรงกับข้อมูลใน db\\n                    mycursor.execute(sql,val)#\\n                    mydb.commit()#\",\n                \"width\": 75\n            },\n            \"ngo\": {\n                \"comment\": {\n                    \"data\": \"\",\n                    \"show\": false\n                }\n            },\n            \"position\": {\n                \"x\": -73.623,\n                \"y\": -234.11300000000003\n            }\n        }\n    ],\n    \"scene_data\": {\n        \"flow_view_pos_x\": 12.335900000000219,\n        \"flow_view_pos_y\": -287.50499999999863,\n        \"flow_view_zoom_factor\": 0.9090909090909091\n    }\n}\n",
            "name": "Main"
        }
    ]
}
